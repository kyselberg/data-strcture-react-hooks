---
import CodeExample from '../../../components/CodeExample.astro';
import SetExample from '../../../components/SetExample';
import Layout from '../../../layouts/Layout.astro';
---

<Layout title="useSet - Data Structure React Hooks">
  <div class="max-w-4xl mx-auto">
    <div class="mb-8">
      <nav class="text-sm text-gray-500 mb-4">
        <a href="/" class="hover:text-blue-600">Home</a>
        <span class="mx-2">/</span>
        <a href="/docs" class="hover:text-blue-600">Docs</a>
        <span class="mx-2">/</span>
        <a href="/docs/hooks" class="hover:text-blue-600">Hooks</a>
        <span class="mx-2">/</span>
        <span>useSet</span>
      </nav>
      <h1 class="text-4xl font-bold text-gray-900 mb-4">useSet</h1>
      <p class="text-xl text-gray-600">
        A hook that returns a reactive Set with add, delete, and clear operations that automatically trigger re-renders.
      </p>
    </div>

    <div class="prose prose-lg max-w-none">
      <h2>Installation</h2>
      <CodeExample code="import { useSet } from 'data-strcture-react-hooks';" />

      <h2>Basic Usage</h2>
      <CodeExample code={`function MyComponent() {
  const set = useSet(['item1', 'item2']);

  return (
    <div>
      <p>Size: {set.size}</p>
      <button onClick={() => set.add('item3')}>Add Item</button>
      <button onClick={() => set.delete('item1')}>Remove Item</button>
    </div>
  );
}`} />

      <h2>API Reference</h2>

      <h3>Parameters</h3>
      <ul>
        <li><code>defaultValue</code> (T[]): The initial set values</li>
      </ul>

      <h3>Returns</h3>
      <p>A reactive Set with add, delete, and clear operations that automatically trigger re-renders when mutated.</p>

      <h3>Supported Methods</h3>
      <p>The returned Set supports the following mutating methods:</p>
      <ul>
        <li><code>add(value)</code> - Adds a value to the set</li>
        <li><code>delete(value)</code> - Removes a value from the set</li>
        <li><code>clear()</code> - Removes all values from the set</li>
      </ul>

      <h3>Non-Mutating Methods</h3>
      <p>The following methods work as expected but don't trigger re-renders:</p>
      <ul>
        <li><code>has(value)</code> - Checks if a value exists in the set</li>
        <li><code>values()</code> - Returns an iterator of values</li>
        <li><code>forEach(callback)</code> - Iterates over all values</li>
      </ul>

      <h2>Live Example</h2>
      <p>Try out the useSet hook with this interactive example:</p>

      <div class="bg-white border border-gray-200 rounded-lg p-6 mb-8">
        <SetExample client:load />
      </div>

      <h2>Examples</h2>

      <h3>Basic Set Operations</h3>
      <CodeExample code={`const set = useSet(['apple', 'banana']);

// Add values
set.add('orange');              // Set(3) { 'apple', 'banana', 'orange' }
set.add('grape');               // Set(4) { 'apple', 'banana', 'orange', 'grape' }

// Remove values
set.delete('banana');           // Set(3) { 'apple', 'orange', 'grape' }

// Clear all
set.clear();                    // Set(0) {}`} />

      <h3>Unique Tags Example</h3>
      <CodeExample code={`function TagSelector() {
  const selectedTags = useSet([]);
  const [inputValue, setInputValue] = useState('');

  const addTag = () => {
    if (inputValue.trim() && !selectedTags.has(inputValue)) {
      selectedTags.add(inputValue);
      setInputValue('');
    }
  };

  const removeTag = (tag) => {
    selectedTags.delete(tag);
  };

  return (
    <div>
      <div>
        <input
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          placeholder="Enter a tag"
        />
        <button onClick={addTag}>Add Tag</button>
      </div>

      <div>
        {Array.from(selectedTags).map(tag => (
          <span key={tag} className="tag">
            {tag}
            <button onClick={() => removeTag(tag)}>×</button>
          </span>
        ))}
      </div>
    </div>
  );
}`} />

      <h3>Permission System Example</h3>
      <CodeExample code={`function PermissionManager() {
  const permissions = useSet(['read', 'write']);

  const togglePermission = (permission) => {
    if (permissions.has(permission)) {
      permissions.delete(permission);
    } else {
      permissions.add(permission);
    }
  };

  const hasPermission = (permission) => {
    return permissions.has(permission);
  };

  return (
    <div>
      <h3>User Permissions</h3>

      <div>
        <label>
          <input
            type="checkbox"
            checked={hasPermission('read')}
            onChange={() => togglePermission('read')}
          />
          Read Access
        </label>
      </div>

      <div>
        <label>
          <input
            type="checkbox"
            checked={hasPermission('write')}
            onChange={() => togglePermission('write')}
          />
          Write Access
        </label>
      </div>

      <div>
        <label>
          <input
            type="checkbox"
            checked={hasPermission('admin')}
            onChange={() => togglePermission('admin')}
          />
          Admin Access
        </label>
      </div>

      <p>Active permissions: {Array.from(permissions).join(', ')}</p>
    </div>
  );
}`} />

      <h2>How It Works</h2>
      <p>
        The useSet hook uses JavaScript's Proxy API to intercept method calls on the Set.
        When a mutating method (add, delete, clear) is called, it triggers a re-render of
        the component by updating an internal state variable. This ensures that your UI stays
        in sync with the Set's state.
      </p>

      <h2>TypeScript Support</h2>
      <p>
        The hook is fully typed and supports generic types:
      </p>
      <CodeExample code={`const stringSet = useSet<string>(['a', 'b', 'c']);
const numberSet = useSet<number>([1, 2, 3]);
const mixedSet = useSet<any>([1, 'string', { id: 1 }]);`} />

      <div class="mt-12 pt-8 border-t border-gray-200">
        <div class="flex justify-between">
          <a href="/docs/hooks/useMap" class="text-blue-600 hover:text-blue-700 font-medium">
            ← Previous: useMap
          </a>
          <a href="/docs/hooks/useQueue" class="text-blue-600 hover:text-blue-700 font-medium">
            Next: useQueue →
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>